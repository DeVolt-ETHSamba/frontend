(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1383],{46601:function(){},47373:function(e,n){"use strict";n.Z={534351:{Voltz:{address:"0x2f179466751856302bd0a1D2fD1620f45c50C8aa",abi:[{type:"constructor",inputs:[],stateMutability:"nonpayable"},{type:"function",name:"DOMAIN_SEPARATOR",inputs:[],outputs:[{name:"",type:"bytes32",internalType:"bytes32"}],stateMutability:"view"},{type:"function",name:"allowance",inputs:[{name:"owner",type:"address",internalType:"address"},{name:"spender",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"approve",inputs:[{name:"spender",type:"address",internalType:"address"},{name:"value",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"nonpayable"},{type:"function",name:"balanceOf",inputs:[{name:"account",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"burn",inputs:[{name:"value",type:"uint256",internalType:"uint256"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"burnFrom",inputs:[{name:"account",type:"address",internalType:"address"},{name:"value",type:"uint256",internalType:"uint256"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"decimals",inputs:[],outputs:[{name:"",type:"uint8",internalType:"uint8"}],stateMutability:"view"},{type:"function",name:"eip712Domain",inputs:[],outputs:[{name:"fields",type:"bytes1",internalType:"bytes1"},{name:"name",type:"string",internalType:"string"},{name:"version",type:"string",internalType:"string"},{name:"chainId",type:"uint256",internalType:"uint256"},{name:"verifyingContract",type:"address",internalType:"address"},{name:"salt",type:"bytes32",internalType:"bytes32"},{name:"extensions",type:"uint256[]",internalType:"uint256[]"}],stateMutability:"view"},{type:"function",name:"mint",inputs:[{name:"to",type:"address",internalType:"address"},{name:"amount",type:"uint256",internalType:"uint256"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"name",inputs:[],outputs:[{name:"",type:"string",internalType:"string"}],stateMutability:"view"},{type:"function",name:"nonces",inputs:[{name:"owner",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"permit",inputs:[{name:"owner",type:"address",internalType:"address"},{name:"spender",type:"address",internalType:"address"},{name:"value",type:"uint256",internalType:"uint256"},{name:"deadline",type:"uint256",internalType:"uint256"},{name:"v",type:"uint8",internalType:"uint8"},{name:"r",type:"bytes32",internalType:"bytes32"},{name:"s",type:"bytes32",internalType:"bytes32"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"symbol",inputs:[],outputs:[{name:"",type:"string",internalType:"string"}],stateMutability:"view"},{type:"function",name:"totalSupply",inputs:[],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"transfer",inputs:[{name:"to",type:"address",internalType:"address"},{name:"value",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"nonpayable"},{type:"function",name:"transferFrom",inputs:[{name:"from",type:"address",internalType:"address"},{name:"to",type:"address",internalType:"address"},{name:"value",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"nonpayable"},{type:"event",name:"Approval",inputs:[{name:"owner",type:"address",indexed:!0,internalType:"address"},{name:"spender",type:"address",indexed:!0,internalType:"address"},{name:"value",type:"uint256",indexed:!1,internalType:"uint256"}],anonymous:!1},{type:"event",name:"EIP712DomainChanged",inputs:[],anonymous:!1},{type:"event",name:"Transfer",inputs:[{name:"from",type:"address",indexed:!0,internalType:"address"},{name:"to",type:"address",indexed:!0,internalType:"address"},{name:"value",type:"uint256",indexed:!1,internalType:"uint256"}],anonymous:!1},{type:"error",name:"ECDSAInvalidSignature",inputs:[]},{type:"error",name:"ECDSAInvalidSignatureLength",inputs:[{name:"length",type:"uint256",internalType:"uint256"}]},{type:"error",name:"ECDSAInvalidSignatureS",inputs:[{name:"s",type:"bytes32",internalType:"bytes32"}]},{type:"error",name:"ERC20InsufficientAllowance",inputs:[{name:"spender",type:"address",internalType:"address"},{name:"allowance",type:"uint256",internalType:"uint256"},{name:"needed",type:"uint256",internalType:"uint256"}]},{type:"error",name:"ERC20InsufficientBalance",inputs:[{name:"sender",type:"address",internalType:"address"},{name:"balance",type:"uint256",internalType:"uint256"},{name:"needed",type:"uint256",internalType:"uint256"}]},{type:"error",name:"ERC20InvalidApprover",inputs:[{name:"approver",type:"address",internalType:"address"}]},{type:"error",name:"ERC20InvalidReceiver",inputs:[{name:"receiver",type:"address",internalType:"address"}]},{type:"error",name:"ERC20InvalidSender",inputs:[{name:"sender",type:"address",internalType:"address"}]},{type:"error",name:"ERC20InvalidSpender",inputs:[{name:"spender",type:"address",internalType:"address"}]},{type:"error",name:"ERC2612ExpiredSignature",inputs:[{name:"deadline",type:"uint256",internalType:"uint256"}]},{type:"error",name:"ERC2612InvalidSigner",inputs:[{name:"signer",type:"address",internalType:"address"},{name:"owner",type:"address",internalType:"address"}]},{type:"error",name:"InvalidAccountNonce",inputs:[{name:"account",type:"address",internalType:"address"},{name:"currentNonce",type:"uint256",internalType:"uint256"}]},{type:"error",name:"InvalidShortString",inputs:[]},{type:"error",name:"StringTooLong",inputs:[{name:"str",type:"string",internalType:"string"}]}],inheritedFunctions:{allowance:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",approve:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",balanceOf:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",decimals:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",name:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",symbol:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",totalSupply:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",transfer:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",transferFrom:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",burn:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",burnFrom:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",DOMAIN_SEPARATOR:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",eip712Domain:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",nonces:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol",permit:"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol"}}},11155111:{InputBox:{address:"0x59b22D57D4f067708AB0c00552767405926dc768",abi:[{inputs:[],name:"InputSizeExceedsLimit",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"dapp",type:"address"},{indexed:!0,internalType:"uint256",name:"inputIndex",type:"uint256"},{indexed:!1,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"bytes",name:"input",type:"bytes"}],name:"InputAdded",type:"event"},{inputs:[{internalType:"address",name:"_dapp",type:"address"},{internalType:"bytes",name:"_input",type:"bytes"}],name:"addInput",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_dapp",type:"address"},{internalType:"uint256",name:"_index",type:"uint256"}],name:"getInputHash",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_dapp",type:"address"}],name:"getNumberOfInputs",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],transactionHash:"0x6fd407718bc4e2b572f1d4d9b21bcab47342f26d4f580a05efe312620113e960",receipt:{to:"0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",from:"0x18930e8a66a1DbE21D00581216789AAB7460Afd0",contractAddress:null,transactionIndex:53,gasUsed:"260728",logsBloom:"0xblockHash:"0x23a2d2dfda0b8535692a2cb0d8d9ba21d6a61af792eeafdec2de792c74d021ab",transactionHash:"0x6fd407718bc4e2b572f1d4d9b21bcab47342f26d4f580a05efe312620113e960",logs:[],blockNumber:3963384,cumulativeGasUsed:"5127142",status:1,byzantium:!0},args:[],numDeployments:6,solcInputHash:"c57872c819d76540188aa154ea5ebd01",metadata:'{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"InputSizeExceedsLimit","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"dapp","type":"address"},{"indexed":true,"internalType":"uint256","name":"inputIndex","type":"uint256"},{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"bytes","name":"input","type":"bytes"}],"name":"InputAdded","type":"event"},{"inputs":[{"internalType":"address","name":"_dapp","type":"address"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"addInput","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_dapp","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getInputHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dapp","type":"address"}],"name":"getNumberOfInputs","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"InputAdded(address,uint256,address,bytes)":{"details":"MUST be triggered on a successful call to `addInput`.","params":{"dapp":"The address of the DApp","input":"The contents of the input","inputIndex":"The index of the input in the input box","sender":"The address that sent the input"}}},"kind":"dev","methods":{"addInput(address,bytes)":{"details":"MUST fire an `InputAdded` event accordingly.      Input larger than machine limit will raise `InputSizeExceedsLimit` error.","params":{"_dapp":"The address of the DApp","_input":"The contents of the input"},"returns":{"_0":"The hash of the input plus some extra metadata"}},"getInputHash(address,uint256)":{"details":"`_index` MUST be in the interval `[0,n)` where `n` is the number of      inputs in the DApp\'s input box. See the `getNumberOfInputs` function.","params":{"_dapp":"The address of the DApp","_index":"The index of the input in the DApp\'s input box"},"returns":{"_0":"The hash of the input at the provided index in the DApp\'s input box"}},"getNumberOfInputs(address)":{"params":{"_dapp":"The address of the DApp"},"returns":{"_0":"Number of inputs in the DApp\'s input box"}}},"stateVariables":{"inputBoxes":{"details":"See the `getNumberOfInputs`, `getInputHash` and `addInput` functions."}},"title":"Input Box","version":1},"userdoc":{"errors":{"InputSizeExceedsLimit()":[{"notice":"Raised when input is larger than the machine limit."}]},"events":{"InputAdded(address,uint256,address,bytes)":{"notice":"Emitted when an input is added to a DApp\'s input box."}},"kind":"user","methods":{"addInput(address,bytes)":{"notice":"Add an input to a DApp\'s input box."},"getInputHash(address,uint256)":{"notice":"Get the hash of an input in a DApp\'s input box."},"getNumberOfInputs(address)":{"notice":"Get the number of inputs in a DApp\'s input box."}},"notice":"Trustless and permissionless contract that receives arbitrary blobs (called \\"inputs\\") from anyone and adds a compound hash to an append-only list (called \\"input box\\"). Each DApp has its own input box. The hash that is stored on-chain is composed by the hash of the input blob, the block number and timestamp, the input sender address, and the input index. Data availability is guaranteed by the emission of `InputAdded` events on every successful call to `addInput`. This ensures that inputs can be retrieved by anyone at any time, without having to rely on centralized data providers. From the perspective of this contract, inputs are encoding-agnostic byte arrays. It is up to the DApp to interpret, validate and act upon inputs.","version":1}},"settings":{"compilationTarget":{"contracts/inputs/InputBox.sol":"InputBox"},"evmVersion":"paris","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/common/CanonicalMachine.sol":{"content":"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Canonical Machine Constants Library\\n///\\n/// @notice Defines several constants related to the reference implementation\\n/// of the RISC-V machine that runs Linux, also known as the \\"Cartesi Machine\\".\\nlibrary CanonicalMachine {\\n    /// @notice Base-2 logarithm of number of bytes.\\n    type Log2Size is uint64;\\n\\n    /// @notice Machine word size (8 bytes).\\n    Log2Size constant WORD_LOG2_SIZE = Log2Size.wrap(3);\\n\\n    /// @notice Machine address space size (2^64 bytes).\\n    Log2Size constant MACHINE_LOG2_SIZE = Log2Size.wrap(64);\\n\\n    /// @notice Keccak-256 output size (32 bytes).\\n    Log2Size constant KECCAK_LOG2_SIZE = Log2Size.wrap(5);\\n\\n    /// @notice Maximum input size (~2 megabytes).\\n    /// @dev The offset and size fields use up the extra 64 bytes.\\n    uint256 constant INPUT_MAX_SIZE = (1 << 21) - 64;\\n\\n    /// @notice Maximum voucher metadata memory range (2 megabytes).\\n    Log2Size constant VOUCHER_METADATA_LOG2_SIZE = Log2Size.wrap(21);\\n\\n    /// @notice Maximum notice metadata memory range (2 megabytes).\\n    Log2Size constant NOTICE_METADATA_LOG2_SIZE = Log2Size.wrap(21);\\n\\n    /// @notice Maximum epoch voucher memory range (128 megabytes).\\n    Log2Size constant EPOCH_VOUCHER_LOG2_SIZE = Log2Size.wrap(37);\\n\\n    /// @notice Maximum epoch notice memory range (128 megabytes).\\n    Log2Size constant EPOCH_NOTICE_LOG2_SIZE = Log2Size.wrap(37);\\n\\n    /// @notice Unwrap `s` into its underlying uint64 value.\\n    /// @param s Base-2 logarithm of some number of bytes\\n    function uint64OfSize(Log2Size s) internal pure returns (uint64) {\\n        return Log2Size.unwrap(s);\\n    }\\n\\n    /// @notice Return the position of an intra memory range on a memory range\\n    ///         with contents with the same size.\\n    /// @param index Index of intra memory range\\n    /// @param log2Size Base-2 logarithm of intra memory range size\\n    function getIntraMemoryRangePosition(\\n        uint64 index,\\n        Log2Size log2Size\\n    ) internal pure returns (uint64) {\\n        return index << Log2Size.unwrap(log2Size);\\n    }\\n}\\n","keccak256":"0x97cdce56cdb4f0b4164e6be3a72e50469a3124e4716e753a1792aa70eac614f5","license":"Apache-2.0 (see LICENSE)"},"contracts/inputs/IInputBox.sol":{"content":"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Input Box interface\\ninterface IInputBox {\\n    /// @notice Emitted when an input is added to a DApp\'s input box.\\n    /// @param dapp The address of the DApp\\n    /// @param inputIndex The index of the input in the input box\\n    /// @param sender The address that sent the input\\n    /// @param input The contents of the input\\n    /// @dev MUST be triggered on a successful call to `addInput`.\\n    event InputAdded(\\n        address indexed dapp,\\n        uint256 indexed inputIndex,\\n        address sender,\\n        bytes input\\n    );\\n\\n    /// @notice Add an input to a DApp\'s input box.\\n    /// @param _dapp The address of the DApp\\n    /// @param _input The contents of the input\\n    /// @return The hash of the input plus some extra metadata\\n    /// @dev MUST fire an `InputAdded` event accordingly.\\n    ///      Input larger than machine limit will raise `InputSizeExceedsLimit` error.\\n    function addInput(\\n        address _dapp,\\n        bytes calldata _input\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs in a DApp\'s input box.\\n    /// @param _dapp The address of the DApp\\n    /// @return Number of inputs in the DApp\'s input box\\n    function getNumberOfInputs(address _dapp) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in a DApp\'s input box.\\n    /// @param _dapp The address of the DApp\\n    /// @param _index The index of the input in the DApp\'s input box\\n    /// @return The hash of the input at the provided index in the DApp\'s input box\\n    /// @dev `_index` MUST be in the interval `[0,n)` where `n` is the number of\\n    ///      inputs in the DApp\'s input box. See the `getNumberOfInputs` function.\\n    function getInputHash(\\n        address _dapp,\\n        uint256 _index\\n    ) external view returns (bytes32);\\n}\\n","keccak256":"0x95e007391405e86eeb980be9a99e5cf15b34bb5b819292d206ef8a58f9c46c25","license":"Apache-2.0 (see LICENSE)"},"contracts/inputs/InputBox.sol":{"content":"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IInputBox} from \\"./IInputBox.sol\\";\\nimport {LibInput} from \\"../library/LibInput.sol\\";\\n\\n/// @title Input Box\\n///\\n/// @notice Trustless and permissionless contract that receives arbitrary blobs\\n/// (called \\"inputs\\") from anyone and adds a compound hash to an append-only list\\n/// (called \\"input box\\"). Each DApp has its own input box.\\n///\\n/// The hash that is stored on-chain is composed by the hash of the input blob,\\n/// the block number and timestamp, the input sender address, and the input index.\\n///\\n/// Data availability is guaranteed by the emission of `InputAdded` events\\n/// on every successful call to `addInput`. This ensures that inputs can be\\n/// retrieved by anyone at any time, without having to rely on centralized data\\n/// providers.\\n///\\n/// From the perspective of this contract, inputs are encoding-agnostic byte\\n/// arrays. It is up to the DApp to interpret, validate and act upon inputs.\\ncontract InputBox is IInputBox {\\n    /// @notice Mapping from DApp address to list of input hashes.\\n    /// @dev See the `getNumberOfInputs`, `getInputHash` and `addInput` functions.\\n    mapping(address => bytes32[]) internal inputBoxes;\\n\\n    function addInput(\\n        address _dapp,\\n        bytes calldata _input\\n    ) external override returns (bytes32) {\\n        bytes32[] storage inputBox = inputBoxes[_dapp];\\n        uint256 inputIndex = inputBox.length;\\n\\n        bytes32 inputHash = LibInput.computeInputHash(\\n            msg.sender,\\n            block.number,\\n            block.timestamp,\\n            _input,\\n            inputIndex\\n        );\\n\\n        // add input to the input box\\n        inputBox.push(inputHash);\\n\\n        // block.number and timestamp can be retrieved by the event metadata itself\\n        emit InputAdded(_dapp, inputIndex, msg.sender, _input);\\n\\n        return inputHash;\\n    }\\n\\n    function getNumberOfInputs(\\n        address _dapp\\n    ) external view override returns (uint256) {\\n        return inputBoxes[_dapp].length;\\n    }\\n\\n    function getInputHash(\\n        address _dapp,\\n        uint256 _index\\n    ) external view override returns (bytes32) {\\n        return inputBoxes[_dapp][_index];\\n    }\\n}\\n","keccak256":"0x83d36baf0bda5a63ea5eae7e021b80eabb30f9ace14fcdb5936f0e27b779fccb","license":"Apache-2.0 (see LICENSE)"},"contracts/library/LibInput.sol":{"content":"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {CanonicalMachine} from \\"../common/CanonicalMachine.sol\\";\\n\\n/// @title Input Library\\nlibrary LibInput {\\n    using CanonicalMachine for CanonicalMachine.Log2Size;\\n\\n    /// @notice Raised when input is larger than the machine limit.\\n    error InputSizeExceedsLimit();\\n\\n    /// @notice Summarize input data in a single hash.\\n    /// @param sender `msg.sender`\\n    /// @param blockNumber `block.number`\\n    /// @param blockTimestamp `block.timestamp`\\n    /// @param input The input blob\\n    /// @param inputIndex The index of the input in the input box\\n    /// @return The input hash\\n    function computeInputHash(\\n        address sender,\\n        uint256 blockNumber,\\n        uint256 blockTimestamp,\\n        bytes calldata input,\\n        uint256 inputIndex\\n    ) internal pure returns (bytes32) {\\n        if (input.length > CanonicalMachine.INPUT_MAX_SIZE) {\\n            revert InputSizeExceedsLimit();\\n        }\\n\\n        bytes32 keccakMetadata = keccak256(\\n            abi.encode(\\n                sender,\\n                blockNumber,\\n                blockTimestamp,\\n                0, //TODO decide how to deal with epoch index\\n                inputIndex // input index in the input box\\n            )\\n        );\\n\\n        bytes32 keccakInput = keccak256(input);\\n\\n        return keccak256(abi.encode(keccakMetadata, keccakInput));\\n    }\\n}\\n","keccak256":"0x27f2fe9efc2f6fc85687ea78e5c79a090c46ece27e7bb26e0c184a3fef62317a","license":"Apache-2.0 (see LICENSE)"}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b506103be806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631789cd631461004657806361a93c871461006b578063677087c914610094575b600080fd5b610059610054366004610253565b6100a7565b60405190815260200160405180910390f35b6100596100793660046102d6565b6001600160a01b031660009081526020819052604090205490565b6100596100a23660046102f8565b61013b565b6001600160a01b03831660009081526020819052604081208054826100d0334342898987610178565b83546001810185556000858152602090200181905560405190915082906001600160a01b038916907f6aaa400068bf4ca337265e2a1e1e841f66b8597fd5b452fdc52a44bed28a0784906101299033908b908b90610322565b60405180910390a39695505050505050565b6001600160a01b038216600090815260208190526040812080548390811061016557610165610362565b9060005260206000200154905092915050565b6000621fffc083111561019e57604051634273a49560e11b815260040160405180910390fd5b604080516001600160a01b03891660208201529081018790526060810186905260006080820181905260a082018490529060c001604051602081830303815290604052805190602001209050600085856040516101fc929190610378565b604080519182900382206020808401959095528282015280518083038201815260609092019052805192019190912098975050505050505050565b80356001600160a01b038116811461024e57600080fd5b919050565b60008060006040848603121561026857600080fd5b61027184610237565b9250602084013567ffffffffffffffff8082111561028e57600080fd5b818601915086601f8301126102a257600080fd5b8135818111156102b157600080fd5b8760208285010111156102c357600080fd5b6020830194508093505050509250925092565b6000602082840312156102e857600080fd5b6102f182610237565b9392505050565b6000806040838503121561030b57600080fd5b61031483610237565b946020939093013593505050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b818382376000910190815291905056fea264697066735822122043b0a58952371efb5f75573ec65e82305da7154e6338f4e9c00f5cc07f92c4af64736f6c63430008130033",deployedBytecode:"0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631789cd631461004657806361a93c871461006b578063677087c914610094575b600080fd5b610059610054366004610253565b6100a7565b60405190815260200160405180910390f35b6100596100793660046102d6565b6001600160a01b031660009081526020819052604090205490565b6100596100a23660046102f8565b61013b565b6001600160a01b03831660009081526020819052604081208054826100d0334342898987610178565b83546001810185556000858152602090200181905560405190915082906001600160a01b038916907f6aaa400068bf4ca337265e2a1e1e841f66b8597fd5b452fdc52a44bed28a0784906101299033908b908b90610322565b60405180910390a39695505050505050565b6001600160a01b038216600090815260208190526040812080548390811061016557610165610362565b9060005260206000200154905092915050565b6000621fffc083111561019e57604051634273a49560e11b815260040160405180910390fd5b604080516001600160a01b03891660208201529081018790526060810186905260006080820181905260a082018490529060c001604051602081830303815290604052805190602001209050600085856040516101fc929190610378565b604080519182900382206020808401959095528282015280518083038201815260609092019052805192019190912098975050505050505050565b80356001600160a01b038116811461024e57600080fd5b919050565b60008060006040848603121561026857600080fd5b61027184610237565b9250602084013567ffffffffffffffff8082111561028e57600080fd5b818601915086601f8301126102a257600080fd5b8135818111156102b157600080fd5b8760208285010111156102c357600080fd5b6020830194508093505050509250925092565b6000602082840312156102e857600080fd5b6102f182610237565b9392505050565b6000806040838503121561030b57600080fd5b61031483610237565b946020939093013593505050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b818382376000910190815291905056fea264697066735822122043b0a58952371efb5f75573ec65e82305da7154e6338f4e9c00f5cc07f92c4af64736f6c63430008130033",devdoc:{events:{"InputAdded(address,uint256,address,bytes)":{details:"MUST be triggered on a successful call to `addInput`.",params:{dapp:"The address of the DApp",input:"The contents of the input",inputIndex:"The index of the input in the input box",sender:"The address that sent the input"}}},kind:"dev",methods:{"addInput(address,bytes)":{details:"MUST fire an `InputAdded` event accordingly.      Input larger than machine limit will raise `InputSizeExceedsLimit` error.",params:{_dapp:"The address of the DApp",_input:"The contents of the input"},returns:{_0:"The hash of the input plus some extra metadata"}},"getInputHash(address,uint256)":{details:"`_index` MUST be in the interval `[0,n)` where `n` is the number of      inputs in the DApp's input box. See the `getNumberOfInputs` function.",params:{_dapp:"The address of the DApp",_index:"The index of the input in the DApp's input box"},returns:{_0:"The hash of the input at the provided index in the DApp's input box"}},"getNumberOfInputs(address)":{params:{_dapp:"The address of the DApp"},returns:{_0:"Number of inputs in the DApp's input box"}}},stateVariables:{inputBoxes:{details:"See the `getNumberOfInputs`, `getInputHash` and `addInput` functions."}},title:"Input Box",version:1},userdoc:{errors:{"InputSizeExceedsLimit()":[{notice:"Raised when input is larger than the machine limit."}]},events:{"InputAdded(address,uint256,address,bytes)":{notice:"Emitted when an input is added to a DApp's input box."}},kind:"user",methods:{"addInput(address,bytes)":{notice:"Add an input to a DApp's input box."},"getInputHash(address,uint256)":{notice:"Get the hash of an input in a DApp's input box."},"getNumberOfInputs(address)":{notice:"Get the number of inputs in a DApp's input box."}},notice:'Trustless and permissionless contract that receives arbitrary blobs (called "inputs") from anyone and adds a compound hash to an append-only list (called "input box"). Each DApp has its own input box. The hash that is stored on-chain is composed by the hash of the input blob, the block number and timestamp, the input sender address, and the input index. Data availability is guaranteed by the emission of `InputAdded` events on every successful call to `addInput`. This ensures that inputs can be retrieved by anyone at any time, without having to rely on centralized data providers. From the perspective of this contract, inputs are encoding-agnostic byte arrays. It is up to the DApp to interpret, validate and act upon inputs.',version:1},storageLayout:{storage:[{astId:3440,contract:"contracts/inputs/InputBox.sol:InputBox",label:"inputBoxes",offset:0,slot:"0",type:"t_mapping(t_address,t_array(t_bytes32)dyn_storage)"}],types:{t_address:{encoding:"inplace",label:"address",numberOfBytes:"20"},"t_array(t_bytes32)dyn_storage":{base:"t_bytes32",encoding:"dynamic_array",label:"bytes32[]",numberOfBytes:"32"},t_bytes32:{encoding:"inplace",label:"bytes32",numberOfBytes:"32"},"t_mapping(t_address,t_array(t_bytes32)dyn_storage)":{encoding:"mapping",key:"t_address",label:"mapping(address => bytes32[])",numberOfBytes:"32",value:"t_array(t_bytes32)dyn_storage"}}}}}}},97583:function(e,n,t){"use strict";t.d(n,{xr:function(){return w},em:function(){return f},r4:function(){return o},en:function(){return d},vl:function(){return F},$z:function(){return h},j0:function(){return x},x8:function(){return A},O3:function(){return C},u9:function(){return E},XO:function(){return N}});var a=t(2265),i=t(63262),r=t(56926),s=t(33590);function o(e){let[n,t]=(0,a.useState)(!0),[o,d]=(0,a.useState)(null),u=(0,s.j)(e=>e.nativeCurrencyPrice),{targetNetwork:p}=(0,i.p)(),{data:c,isError:l,isLoading:b}=(0,r.KQ)({address:e,watch:!0,chainId:p.id}),f=(0,a.useCallback)(()=>{u>0&&t(!n)},[n,u]);return(0,a.useEffect)(()=>{(null==c?void 0:c.formatted)&&d(Number(c.formatted))},[c,p]),{balance:o,price:u,isError:l,isLoading:b,onToggleBalance:f,isEthBalance:n}}function d(e){let[n,t]=(0,a.useState)(!1),[i,r]=(0,a.useState)();return(0,a.useEffect)(()=>{void 0!==i&&i!==e&&(t(!0),setTimeout(()=>t(!1),2e3)),r(e)},[e,i]),{showAnimation:n}}var u=t(27581);let p="scaffoldEth2.burnerWallet.sk",c=e=>(null==e?void 0:e.length)===64||(null==e?void 0:e.length)===66,l=(0,u.w)(),b=e=>{if(null!=window){var n,t;null===(t=window)||void 0===t||null===(n=t.localStorage)||void 0===n||n.setItem(p,e)}},f=()=>{let e="0x";if(null!=window){var n,t,a,i,r;e=null!==(r=null===(i=window)||void 0===i?void 0:null===(a=i.localStorage)||void 0===a?void 0:null===(t=a.getItem)||void 0===t?void 0:null===(n=t.call(a,p))||void 0===n?void 0:n.replaceAll('"',""))&&void 0!==r?r:"0x"}return e&&c(e)?e:(b(l),l)};var m=t(75070),y=t(62209);let h=e=>{var n;let t=(0,m.tm)(),{targetNetwork:s}=(0,i.p)(),o=null===y.r||void 0===y.r?void 0:null===(n=y.r[s.id])||void 0===n?void 0:n[e],[d,u]=(0,a.useState)(y.d.LOADING),p=(0,r.t_)({chainId:s.id});return(0,a.useEffect)(()=>{(async()=>{if(!o){u(y.d.NOT_FOUND);return}let e=await p.getBytecode({address:o.address});if(t()){if("0x"===e){u(y.d.NOT_FOUND);return}u(y.d.DEPLOYED)}})()},[t,e,o,p]),{data:d===y.d.DEPLOYED?o:void 0,isLoading:d===y.d.LOADING}};var v=t(6103),g=t(62973);let x=()=>{let{targetNetwork:e}=(0,i.p)(),[n,t]=(0,a.useState)(0);return(0,a.useEffect)(()=>{(async()=>{t(await (0,g.rZ)(e))})()},[e]),(0,m.Yz)(async()=>{t(await (0,g.rZ)(e))},null),n};var I=t(6435);let T=["#666666","#bbbbbb"];function w(e,n){var t;let a=null!==(t=e.color)&&void 0!==t?t:T;return Array.isArray(a)?n?a[1]:a[0]:a}let A=()=>{let{resolvedTheme:e}=(0,I.F)(),{targetNetwork:n}=(0,i.p)();return w(n,"dark"===e)},C=(e,n)=>{(0,a.useEffect)(()=>{function t(t){t.target instanceof Element&&e.current&&!e.current.contains(t.target)&&n()}return document.addEventListener("click",t),()=>document.removeEventListener("click",t)},[e,n])},E=e=>{let{contractName:n,functionName:t,args:s,value:o,onBlockConfirmation:d,blockConfirmations:u,...p}=e,{data:c}=h(n),{chain:l}=(0,r.LN)(),b=N(),[f,m]=(0,a.useState)(!1),{targetNetwork:y}=(0,i.p)(),v=(0,r.GG)({chainId:y.id,address:null==c?void 0:c.address,abi:null==c?void 0:c.abi,functionName:t,args:s,value:o,...p}),x=async function(){let{args:e,value:n,...t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!c){g.t6.error("Target Contract is not deployed, did you forget to run `yarn deploy`?");return}if(!(null==l?void 0:l.id)){g.t6.error("Please connect your wallet");return}if((null==l?void 0:l.id)!==y.id){g.t6.error("You are on the wrong network");return}if(v.writeAsync)try{return m(!0),await b(()=>v.writeAsync({args:null!=e?e:s,value:null!=n?n:o,...t}),{onBlockConfirmation:d,blockConfirmations:u})}catch(e){throw e}finally{m(!1)}else{g.t6.error("Contract writer error. Try again.");return}};return{...v,isMining:f,writeAsync:x}};var _=t(57437),S=t(30129);let k=e=>{let{message:n,blockExplorerLink:t}=e;return(0,_.jsxs)("div",{className:"flex flex-col ml-1 cursor-default",children:[(0,_.jsx)("p",{className:"my-0",children:n}),t&&t.length>0?(0,_.jsx)("a",{href:t,target:"_blank",rel:"noreferrer",className:"block link text-md",children:"check out transaction"}):null]})},N=e=>{let n=e,{data:t}=(0,r.py)();return void 0===n&&t&&(n=t),async(e,t)=>{let a;if(!n){g.t6.error("Cannot access account"),console.error("⚡️ ~ file: useTransactor.tsx ~ error");return}let i=null;try{let r=await n.getChainId(),s=(0,S.uV)();if(i=g.t6.loading((0,_.jsx)(k,{message:"Awaiting for user confirmation"})),"function"==typeof e){let n=await e();a="string"==typeof n?n:n.hash}else if(null!=e)a=await n.sendTransaction(e);else throw Error("Incorrect transaction passed to transactor");g.t6.remove(i);let o=r?(0,g.kY)(r,a):"";i=g.t6.loading((0,_.jsx)(k,{message:"Waiting for transaction to complete.",blockExplorerLink:o}));let d=await s.waitForTransactionReceipt({hash:a,confirmations:null==t?void 0:t.blockConfirmations});g.t6.remove(i),g.t6.success((0,_.jsx)(k,{message:"Transaction completed successfully!",blockExplorerLink:o}),{icon:"\uD83C\uDF89"}),(null==t?void 0:t.onBlockConfirmation)&&t.onBlockConfirmation(d)}catch(n){i&&g.t6.remove(i),console.error("⚡️ ~ file: useTransactor.ts ~ error",n);let e=(0,g.Hr)(n);throw g.t6.error(e),n}return a}};var D=t(44959),L=t(7955),O=t(47283),R=t(76139),z=t(27833);(0,D.g)({chain:z.c,mode:"hardhat",transport:(0,L.j)("ws://127.0.0.1:8545")}).extend(O.I).extend(R.v);var B=t(51660);let M="wagmi.wallet",P=(e,n,t)=>{let a=t.find(e=>"safe"===e.id&&e.ready);if(a)return{connector:a};let i=!v.default.onlyLocalBurnerWallet||e.id===z.c.id;if(n){if(v.default.walletAutoConnect){if(n===B.GW&&!i)return;return{connector:t.find(e=>e.id===n)}}}else if(i&&v.default.walletAutoConnect)return{connector:t.find(e=>e.id===B.GW),chainId:e.id}},F=()=>{let e=(0,m.Fx)(M),[n,t]=(0,m._)("scaffoldEth2.wallet",null!=e?e:"",{initializeWithValue:!1}),a=(0,r.$4)();(0,r.mA)({onConnect(e){var n;let{connector:a}=e;t(null!==(n=null==a?void 0:a.id)&&void 0!==n?n:"")},onDisconnect(){window.localStorage.setItem(M,JSON.stringify("")),t("")}}),(0,m.qR)(()=>{let e=P((0,g.g$)()[0],n,a.connectors);(null==e?void 0:e.connector)&&a.connect({connector:e.connector,chainId:e.chainId})})}},63262:function(e,n,t){"use strict";t.d(n,{p:function(){return d}});var a=t(2265),i=t(56926),r=t(6103),s=t(33590),o=t(62973);function d(){let{chain:e}=(0,i.LN)(),n=(0,s.j)(e=>{let{targetNetwork:n}=e;return n}),t=(0,s.j)(e=>{let{setTargetNetwork:n}=e;return n});return(0,a.useEffect)(()=>{let a=r.default.targetNetworks.find(n=>n.id===(null==e?void 0:e.id));a&&a.id!==n.id&&t(a)},[null==e?void 0:e.id,t,n.id]),{targetNetwork:{...n,...o.Vw[n.id]}}}},6103:function(e,n,t){"use strict";var a=t(75398),i=t(62601);let r={targetNetworks:[a.F],pollingInterval:3e4,alchemyApiKey:i.env.NEXT_PUBLIC_ALCHEMY_API_KEY||"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF",walletConnectProjectId:i.env.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID||"3a8170812b534d0ff9d794f19a901d64",onlyLocalBurnerWallet:!0,walletAutoConnect:!0};n.default=r},33590:function(e,n,t){"use strict";t.d(n,{j:function(){return r}});var a=t(94660),i=t(6103);let r=(0,a.ZP)(e=>({nativeCurrencyPrice:0,setNativeCurrencyPrice:n=>e(()=>({nativeCurrencyPrice:n})),targetNetwork:i.default.targetNetworks[0],setTargetNetwork:n=>e(()=>({targetNetwork:n}))}))},51660:function(e,n,t){"use strict";t.d(n,{nl:function(){return b},GW:function(){return c},P2:function(){return l}});var a=t(95898),i=t(18311),r=t(33720),s=t(2828),o=t(46750),d=t(97583);let u={accountNotFound:"Account not found",couldNotConnect:"Could not connect to network",chainIdNotResolved:"Could not resolve chainId",chainNotSupported:"Chain is not supported, check burner wallet config"};class p extends Error{constructor(e,n){let t="BurnerConnectorError ".concat(e,": ").concat(null!=n?n:""," ");super(t),console.warn(t)}}let c="burner-wallet",l="Burner Wallet";class b extends o.wR{async getProvider(){if(!this.provider){let e=this.getChainFromId();this.provider=new a.c(e.rpcUrls.default.http[0])}return this.provider}async getWalletClient(e){let n=this.getChainFromId(null==e?void 0:e.chainId);if(!this.burnerWallet){let e=(0,s.L)((0,d.em)()),t=(0,i.K)({chain:n,account:e,transport:(0,r.d)()});this.burnerWallet=t}return Promise.resolve(this.burnerWallet)}async connect(e){let n=this.getChainFromId(null==e?void 0:e.chainId);this.provider=new a.c(n.rpcUrls.default.http[0]);let t=await this.getAccount();if(null==this.provider||null==t)throw new p(u.couldNotConnect);if(!t)throw new p(u.accountNotFound);return Promise.resolve({account:t,chain:{id:n.id,unsupported:!1},provider:this.provider})}getChainFromId(e){let n=null!=e?e:this.options.defaultChainId,t=this.chains.find(e=>e.id===n);if(null==t)throw new p(u.chainNotSupported);return t}disconnect(){return console.log("disconnect from burnerwallet"),Promise.resolve()}async getAccount(){return(0,s.L)((0,d.em)()).address}async getChainId(){var e,n;let t=await (null===(e=this.provider)||void 0===e?void 0:e.getNetwork()),a=null!==(n=null==t?void 0:t.chainId)&&void 0!==n?n:this.options.defaultChainId;if(null==a)throw new p(u.chainIdNotResolved);return Promise.resolve(a)}async isAuthorized(){try{return!!await this.getAccount()}catch(e){return!1}}async onAccountsChanged(){let e=await this.getChainId(),n=this.getChainFromId(e),t=(0,s.L)((0,d.em)()),a=(0,i.K)({chain:n,account:t,transport:(0,r.d)()});this.burnerWallet=a}async switchChain(e){let n=this.getChainFromId(e);return this.provider=new a.c(n.rpcUrls.default.http[0]),await this.onChainChanged(),n}async onChainChanged(){let e=await this.getChainId(),n=this.getChainFromId(e),t=(0,s.L)((0,d.em)()),a=(0,i.K)({chain:n,account:t,transport:(0,r.d)()});this.burnerWallet=a,this.emit("change",{chain:{id:e,unsupported:!1}})}onDisconnect(e){e&&console.warn(e)}constructor(e){super(e),this.id=c,this.name=l,this.ready=!0,this.burnerWallet=void 0}}},62209:function(e,n,t){"use strict";var a,i;t.d(n,{d:function(){return i},r:function(){return r}});let r=((e,n)=>{let t={};for(let a of Array.from(new Set([...Object.keys(n),...Object.keys(e)]))){if(!n[a]){t[a]=e[a];continue}let i=Object.fromEntries(Object.entries(n[a]).map(e=>{let[n,t]=e;return[n,{...t,external:!0}]}));t[a]={...e[a],...i}}return t})(t(47373).Z,{});(a=i||(i={}))[a.LOADING=0]="LOADING",a[a.DEPLOYED=1]="DEPLOYED",a[a.NOT_FOUND=2]="NOT_FOUND"},62973:function(e,n,t){"use strict";t.d(n,{Vw:function(){return _},rZ:function(){return l},Kx:function(){return k},kY:function(){return S},Hr:function(){return Z},g$:function(){return N},t6:function(){return H}});var a=t(95356),i=t(89592),r=t(49192),s=t(33720),o=t(71606),d=t(75404),u=t(6103);let p=(0,r.v)({chain:d.R,transport:(0,s.d)("".concat(d.R.rpcUrls.alchemy.http[0],"/").concat(u.default.alchemyApiKey))}),c=(0,o.V)(["function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)","function token0() external view returns (address)","function token1() external view returns (address)"]),l=async e=>{if("ETH"!==e.nativeCurrency.symbol&&"SEP"!==e.nativeCurrency.symbol&&!e.nativeCurrencyTokenAddress)return 0;try{let n=new a.WU(1,"0x6B175474E89094C44Da98b954EedeAC495271d0F",18),t=new a.WU(1,e.nativeCurrencyTokenAddress||"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",18),r={address:i.sO.getAddress(t,n),abi:c},s=await p.readContract({...r,functionName:"getReserves"}),o=await p.readContract({...r,functionName:"token0"}),d=await p.readContract({...r,functionName:"token1"}),u=[t,n].find(e=>e.address===o),l=[t,n].find(e=>e.address===d),b=new i.sO(a.ih.fromRawAmount(u,s[0].toString()),a.ih.fromRawAmount(l,s[1].toString())),f=new i.AW([b],t,n);return parseFloat(f.midPrice.toSignificant(6))}catch(n){return console.error("useNativeCurrencyPrice - Error fetching ".concat(e.nativeCurrency.symbol," price from Uniswap: "),n),0}};var b=t(27833),f=t(75398),m=t(24368),y=t(1199),h=t(3748),v=t(39998),g=t(28331),x=t(2087),I=t(10056),T=t(14576),w=t(41109),A=t(62659),C=t(93712),E=t(44555);let _={[b.c.id]:{color:"#b8af0c"},[d.R.id]:{color:"#ff8b9e"},[f.F.id]:{color:["#5f4bb6","#87ff65"]},[m.w.id]:{color:"#0975F6"},[y.K.id]:{color:"#48a9a6"},[h.y.id]:{color:"#2bbdf7",nativeCurrencyTokenAddress:"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0"},[v.v.id]:{color:"#92D9FA",nativeCurrencyTokenAddress:"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0"},[g.O.id]:{color:"#f01a37"},[x.v.id]:{color:"#f01a37"},[I.Z.id]:{color:"#28a0f0"},[T.y.id]:{color:"#28a0f0"},[w.Q.id]:{color:"#1969ff"},[A.P.id]:{color:"#1969ff"},[C.o.id]:{color:"#fbebd4"}};function S(e,n){var t,a,i;let r=Object.keys(E).filter(n=>E[n].id===e);if(0===r.length)return"";let s=null===(i=E[r[0]])||void 0===i?void 0:null===(a=i.blockExplorers)||void 0===a?void 0:null===(t=a.default)||void 0===t?void 0:t.url;return s?"".concat(s,"/tx/").concat(n):""}function k(e,n){var t,a;let i=null===(a=e.blockExplorers)||void 0===a?void 0:null===(t=a.default)||void 0===t?void 0:t.url;return e.id===b.c.id?"/blockexplorer/address/".concat(n):i?"".concat(i,"/address/").concat(n):"https://etherscan.io/address/".concat(n)}function N(){return u.default.targetNetworks.map(e=>({...e,..._[e.id]}))}var D=t(57437);t(2265);var L=t(5925),O=t(20617),R=t(70432),z=t(35932),B=t(89426),M=t(79425);let P={success:(0,D.jsx)(R.Z,{className:"w-7 text-success"}),loading:(0,D.jsx)("span",{className:"w-6 loading loading-spinner"}),error:(0,D.jsx)(z.Z,{className:"w-7 text-error"}),info:(0,D.jsx)(B.Z,{className:"w-7 text-info"}),warning:(0,D.jsx)(M.Z,{className:"w-7 text-warning"})},F=e=>{let{content:n,status:t,duration:a=3e3,icon:i,position:r="top-center"}=e;return L.Am.custom(e=>(0,D.jsxs)("div",{className:"flex flex-row items-start justify-between max-w-sm rounded-xl shadow-center shadow-accent bg-base-200 p-4 transform-gpu relative transition-all duration-500 ease-in-out space-x-2\n        ".concat("top"==r.substring(0,3)?"hover:translate-y-1 ".concat(e.visible?"top-0":"-top-96"):"hover:-translate-y-1 ".concat(e.visible?"bottom-0":"-bottom-96")),children:[(0,D.jsx)("div",{className:"leading-[0] self-center",children:i||P[t]}),(0,D.jsx)("div",{className:"overflow-x-hidden break-words whitespace-pre-line ".concat(i?"mt-1":""),children:n}),(0,D.jsx)("div",{className:"cursor-pointer text-lg ".concat(i?"mt-1":""),onClick:()=>L.Am.dismiss(e.id),children:(0,D.jsx)(O.Z,{className:"w-6 cursor-pointer",onClick:()=>L.Am.remove(e.id)})})]}),{duration:"loading"===t?1/0:a,position:r})},H={success:(e,n)=>F({content:e,status:"success",...n}),info:(e,n)=>F({content:e,status:"info",...n}),warning:(e,n)=>F({content:e,status:"warning",...n}),error:(e,n)=>F({content:e,status:"error",...n}),loading:(e,n)=>F({content:e,status:"loading",...n}),remove:e=>{L.Am.remove(e)}},U=t(47373).Z,j=null==U?void 0:U[b.c.id];j&&Object.entries(j).reduce((e,n)=>{let[t,a]=n;return e[t]=a.abi,e},{});var G=t(95950);let Z=e=>{var n,t,a,i,r;let s=null!==(n=e.message)&&void 0!==n?n:"An unknown error occurred";if(e instanceof G.G){if(e.details)s=e.details;else if(e.shortMessage){s=e.shortMessage;let n=e.cause;if((null==n?void 0:n.data)&&(null===(a=n.data)||void 0===a?void 0:null===(t=a.abiItem)||void 0===t?void 0:t.name)!=="Error"){let e=null!==(r=null===(i=n.data.args)||void 0===i?void 0:i.toString())&&void 0!==r?r:"";s="".concat(s.replace(/reverted\.$/,"reverted with following reason:"),"\n").concat(n.data.errorName,"(").concat(e,")")}}else e.message?s=e.message:e.name&&(s=e.name)}return s}}}]);